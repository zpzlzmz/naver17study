--TEST1에 제약조건을 추가 : AGE 의 나이범위가 10~30으로 , 제약조건명:CK_TEST1_AGE

ALTER TABLE TEST1 ADD CONSTRAINT CK_TEST1_AGE CHECK (AGE>=10 AND AGE<=30);

--AGE 에 번위를 벗어나게 추가해서 오류 확인 하기 
INSERT INTO TEST1 (NUM,NAME,AGE) VALUES (3,'SON',35); --(ANGEL.CK_TEST1_AGE ) 체크 제약 조건 위배 

--5분 문제 ㅋㅋ ;TEST2 로 하기 

-- 1. TEST2에 BLOOD VARCHAR2(10) 초기값은 A로 추가하기 
ALTER TABLE TEST2 ADD BLOOD VARCHAR2(10) DEFAULT 'B';
-- 2. TEST2에서 TODAY COLUMN 제거 하기 
ALTER TABLE TEST2 DROP COLUMN TODAY;
-- 3. TEST2의 NAME을 SAWON_NAME 으로 컬럼이름 변경하기 
ALTER TABLE TEST2 RENAME COLUMN NAME TO SAWON_NAME;

SELECT * FROM TEST2;
DESC TEST2;


--4.blood 의 제약조건 추가 (A,B,O,AB 만 가능하도록 check )
ALTER TABLE TEST2 ADD CONSTRAINT CK_TEST2_BLOOD CHECK (BLOOD IN('A','B','O','AB'));

-- NN_TEST2_NAME 이라는 제약조건을 젝어 하기
ALTER TABLE TEST2 DROP CONSTRAINT NN_TEST2_NAME;


drop table test1 ;
drop table test2 ; 

-----------------------------------------------------------------------------------------------------
--시퀀스 생성 

create sequence SEQ1 NOCACHE; -- 1부터 1씩 증가하는 CACHE가 없는 시퀀스 생성.


--- 테이블 생성 

CREATE TABLE SAWON(
    NUM NUMBER(3) CONSTRAINT PK_SAWON_NUM PRIMARY KEY,
    NAME VARCHAR2(20),
    BUSEO VARCHAR2(20),
    GENDER VARCHAR2 (10) DEFAULT '남자',
    AGE NUMBER(3),
    HEIGHT NUMBER(5,1),
    WERITEDAY DATE);
    
    
--제약 조건 추가 :부서명은 '홍보부','교육부','관리부' 만 가능하다 
ALTER TABLE SAWON ADD CONSTRAINT CK_SAWON_BUSEO CHECK (BUSEO IN('홍보부','교육부','관리부'));

--제약조건 추가: 성별은 '남자','여자' 만 가능하다
ALTER TABLE SAWON ADD CONSTRAINT CK_SAWON_GENDER CHECK(GENDER IN('남자','여자'));


-- 데이터 추가
INSERT INTO SAWON VALUES (SEQ1.NEXTVAL,'이진구','홍보부','여자',29,167.8,SYSDATE);
INSERT INTO SAWON (NUM,NAME,BUSEO,AGE) VALUES (SEQ1.NEXTVAL, '강호동','관리부',36);
INSERT INTO SAWON (NUM,NAME,BUSEO,HEIGHT) VALUES (SEQ1.NEXTVAL, '이재석','교육부',175.8);
INSERT INTO SAWON (NUM,NAME,BUSEO,GENDER,AGE, WERITEDAY) VALUES (SEQ1.NEXTVAL, '고정민','교육부','여자',27,SYSDATE);
INSERT INTO SAWON VALUES(SEQ1.NEXTVAL,'송해나','홍보부','여자','31',159.9,SYSDATE);
COMMIT;



--UPDATE 수정
UPDATE SAWON SET HEIGHT = 185.1;--만약 WHERE 조건을 안쓰면 전체 데이터가 수정된다 

--다시 취소 
ROLLBACK;

--NUM=3인 경우만 수정 
UPDATE SAWON SET HEIGHT = 185.9 WHERE NUM = 3;

-- 여러 컬럼을 수정하는 경우 
UPDATE SAWON SET BUSEO = '홍보부',AGE = 39, HEIGHT = 162.1 WHERE NAME ='송해나';

--WRITEDAY == NULL 일 경우 '2024-12-12'로 변경을 해보자
UPDATE SAWON SET WERITEDAY = '2024-12-12' WHERE WERITEDAY IS NULL;


--삭제 DELETE 형식 -> DELETE FROM TABLE명 WHERE 조건 (WHERE 조건을 안쓰면 전체 데이터가 삭제)
DELETE FROM SAWON;
-- ROLLBACK
ROLLBACK;

--AGE 가 NULL인 데이터는 모두 삭제
DELETE FROM SAWON WHERE AGE IS NULL;

--GROUP BY  연습

-- 부서별 인원수 와 평균나이를 구하시오 
SELECT BUSEO 부서,COUNT(*) 인원수, ROUND(AVG(AGE),0) FROM SAWON GROUP BY BUSEO;
--성별 인원수와 평균 나이를 구하시오 
SELECT GENDER 성별, COUNT(*) 인원수,ROUND(AVG(AGE),0) FROM SAWON GROUP BY GENDER;
-----------------------------------------------------------------------------------------------------



DESC SAWON;
SELECT * FROM SAWON;

------------------------------------------------------------------------------
--JOIN 용 연습 테이블 생성
CREATE TABLE FOOD(
    FOODNUM NUMBER(3) PRIMARY KEY,
    FOODNAME VARCHAR2 (20),
    FOODPRICE NUMBER(7),
    FOODSIZE VARCHAR2(20));

CREATE TABLE BOOKING(
    BNUM NUMBER(3) CONSTRAINT PK_BOOKING_BNUM PRIMARY KEY,
    BNAME VARCHAR2(20) CONSTRAINT NN_BOOKING_BNAME NOT NULL,
    BHP VARCHAR2(20) CONSTRAINT UQ_BOOKING_BHP UNIQUE,
    FOODNUM NUMBER(3),
    BOOKINGDAY DATE,
    CONSTRAINT FK_FOODNUM FOREIGN KEY(FOODNUM) REFERENCES FOOD(FOODNUM));

---=메뉴 등록
INSERT INTO FOOD VALUES(100,'짜장면',9000,'보통');
INSERT INTO FOOD VALUES(101,'짜장면',11000,'곱빼기');
INSERT INTO FOOD VALUES(200,'탕수육',15000,'보통');
INSERT INTO FOOD VALUES(201,'탕수육',20000,'곱빼기');
INSERT INTO FOOD VALUES(300,'칠리새우',15000,'소');
INSERT INTO FOOD VALUES(301,'칠리새우',30000,'대');
INSERT INTO FOOD VALUES(400,'해물짬뽕',11000,'보통');

COMMIT;
SELECT * FROM FOOD;

--시퀀스 생성
CREATE SEQUENCE SEQ_FOOD START WITH 10 INCREMENT BY 10 NOCACHE;

--예약


INSERT INTO BOOKING VALUES (SEQ_FOOD.NEXTVAL,'이영자','010-2688-8888',200,'2024-12-24');

--오류 발생 시켜보기 (ANGEL.FK_FOODNUM) 위배 -> 메뉴에 없는걸 시킴 ;
INSERT INTO BOOKING VALUES (SEQ_FOOD.NEXTVAL,'김말자','010-2688-7777',401,'2025-1-10');
--오류 고치기
INSERT INTO BOOKING VALUES (SEQ_FOOD.NEXTVAL,'이영자','010-2688-7777',301,'2024-12-24');


INSERT INTO BOOKING VALUES (SEQ_FOOD.NEXTVAL,'효리이','010-1234-8888',400,'2024-12-31');
INSERT INTO BOOKING VALUES (SEQ_FOOD.NEXTVAL,'손예진','010-4312-8888',201,'2025-1-24');
COMMIT;

--INNER JOIN 으로 예약손님의 주문 정보를 확인하자

SELECT 
    BNAME,BHP,FOODNAME,FOODSIZE,FOODPRICE,TO_CHAR(BOOKINGDAY,'YYYY-MM-DD') BOOKINGDAY 
    FROM FOOD F, BOOKING B 
    WHERE F.FOODNUM = B.FOODNUM;

--OUTER JOIN 을 이용해 한번도 주문하지 않은 메뉴들을 알아보자

SELECT 
    F.FOODNUM,BNAME,FOODNAME,FOODPRICE,FOODSIZE
    FROM  FOOD F, BOOKING B
    WHERE F.FOODNUM=B.FOODNUM(+); --이때 아무도 주문하지 않은 음식들은 NULL로 나옴 
    
    --위의 SQL 문을 이용해서 주문자 이름을 빼고 NULL인 경우만 출력하면 아무도 주문하지 않은 메뉴만 골라낼 수 있다.

SELECT 
    F.FOODNUM,BNAME,FOODNAME,FOODPRICE,FOODSIZE
    FROM  FOOD F, BOOKING B
    WHERE F.FOODNUM=B.FOODNUM(+) AND BNAME IS NULL;
    
    --BOOKING (자식테이블)에 추가된 메뉴를 FOOD(부모테이블) 에서 삭제할 수 있을까 ? 
    --자식 테이블 생성시 ON DELETE CASCADE 설정을 안했을경우는 못지움
    DELETE FROM FOOD WHERE FOODNUM = 200; -- CASCADE 삭제를 못함  -> 한번이라도 예약이 되면 참조가 되기 때문에 삭제 X
    --BUT 한번도 참조되지않은 것은 삭제 가능
     DELETE FROM FOOD WHERE FOODNUM = 300; --> 삭제 가능 기모디

--부모 테이블을 삭제해보자
DROP TABLE FOOD; -->당연히 삭제 안됨, 자식테이블을 먼저 삭제 해야지 부모테이블도 삭제가 가능 

